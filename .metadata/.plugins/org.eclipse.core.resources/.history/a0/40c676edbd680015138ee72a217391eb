package main;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import problem.Fridge;
import problem.Matrix;

/**
 * Class that will do all the work to solve the problem
 */
public class WorkSpace {
	
	private String outputFileName; // The file to output to
	private int numberOfWeeks; // The number of weeks to account for
	private double cost; // The cost
	private double discountFactor; // The discount factor
	private Fridge fridge; // The fridge

	/**
	 * Load the parameters and stochastic model of the user's consumption 
	 * behaviour
	 * 
	 * @param inputFile - The input file
	 * 
	 * @return true if successful. false otherwise
	 */
	private boolean loadInputFile (String inputFile) {
		BufferedReader reader; // The buffered reader
		String line; // The line currently being read
		boolean success = true; // Record whether or not we were successful in reading the file
		int lineNo = 0; // The number of lines that were just read
		Scanner scanner; // A scanner for a particular line
		
		try {
			reader = new BufferedReader(new FileReader(inputFile));
			success = true;
		} catch (Exception e) {
			success = false; // We failed somehow
			String errorToPrint; // The error to print
			Class<? extends Exception> exceptionClass = e.getClass();
			
			if (exceptionClass.equals(InputMismatchException.class)) {
				errorToPrint = String.format(
						"Invalid number format on line %d: %s", lineNo,
						e.getMessage());
			} else if (exceptionClass.equals(NoSuchElementException.class)) {
				errorToPrint = String.format("Not enough tokens on line %d",
						lineNo);
			} else if (exceptionClass.equals(NullPointerException.class)) {
				errorToPrint = String.format("Line %d expected, but file ended.", 
						lineNo);
			} else {
				errorToPrint = "Unhandled exception in reading input file";
			}
			System.err.println(errorToPrint);
		} finally {
			reader.close();
			return success;
		}
	}
	
	/**
	 * Constructor
	 * 
	 * @param inputFile - path to input file
	 * @param outputFile - path to output file
	 */
	public WorkSpace (String inputFile, String outputFile) {
		this.outputFileName = outputFile;
		
		
	}
	
}
