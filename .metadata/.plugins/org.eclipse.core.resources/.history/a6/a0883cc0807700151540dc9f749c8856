package main;

import java.util.*;

import solver.OrderingAgent;
import solver.State;
import solver.Action;
import solver.Consumption;
import problem.*;

/**
 * Agent that uses Value Iteration to generate an optimal policy
 */
public class ValueIterationAgent implements OrderingAgent {
	
	private ProblemSpec spec = new ProblemSpec(); // The problem spec
	private Fridge fridge; // The fridge
    private List<Matrix> probabilities; // The probabilities
    private List<State> possibleStates; // All the possible states
    private List<Action> possibleActions; // All possible actions
    private List<Consumption> possibleConsumptions; // All possible consumptions
	
	/**
	 * Constructor
	 * @param spec The problem spec
	 */
	public ValueIterationAgent(ProblemSpec spec) {
		this.spec = spec;
		this.fridge = spec.getFridge();
	    this.probabilities = spec.getProbabilities();
	    
	    this.possibleStates = new ArrayList<State>();
	    this.possibleActions = new ArrayList<Action>();
	    this.possibleConsumptions = new ArrayList<Consumption>();
	}
	
	/**
	 * Generate all possible consumptions
	 */
	private void generateAllPossibleConsumptions() {
		
	}
	
	/**
	 * Generate all possible actions
	 */
	private void generateAllPossibleActions() {
		
	}
	
	/**
	 * Generate all the possible states
	 */
	private void generateAllPossibleStates() {
		
	}
	
	/** Interface methods */
	
	public void doOfflineComputation() {
		
	}
	
	public List<Integer> generateShoppingList(List<Integer> inventory,
	            int numWeeksLeft) {
		// Example code that buys one of each item type.
        // TODO Replace this with your own code.
		List<Integer> shopping = new ArrayList<Integer>();
		int totalItems = 0;
		for (int i : inventory) {
			totalItems += i;
		}
		
		int totalShopping = 0;
		for (int i = 0; i < fridge.getMaxTypes(); i++) {
			if (totalItems >= fridge.getCapacity() || 
			        totalShopping >= fridge.getMaxPurchase()) {
				shopping.add(0);
			} else {
				shopping.add(1);
				totalShopping ++;
				totalItems ++;
			}
		}
		return shopping;
	}
}
